name: Github Pipeline
on:
  push:
    branches:
      - main

jobs:

  Deploy-To-Sandbox:
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: sandbox
      DATA_API_URL: https://arnnvraxch.execute-api.eu-west-1.amazonaws.com/sandbox/stocks
      RAPID_API_KEY: irrelevant
    steps:

      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt install nodejs
          node -v
          sudo apt install npm
          npm -v
          npm install -g aws-cdk
          cdk --version
          sudo apt install jq
          jq --version

          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          aws --version
          aws -h

          npm install netlify-cli --save-dev
          netlify -v



      - name: Configure AWS
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region eu-west-1
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} --profile ipo-track
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}  --profile ipo-track
          aws configure set region eu-west-1  --profile ipo-track

      - name: Deploy-Backend
        run: |
          cd backend
          yarn
          cdk bootstrap
          yarn diff
          yarn fast-deploy

      - name: Deploy-Frontend
        run: |
          cd frontend
          yarn

          export NEXT_PUBLIC_API_URL=$(aws cloudformation describe-stacks | jq '.Stacks | .[] | .Outputs | reduce .[]? as $i ({}; .[$i.OutputKey] = $i.OutputValue) | .sandboxApiURL' | grep -v 'null' | tr -d '"')
          netlify env:set NEXT_PUBLIC_API_URL=$(echo $NEXT_PUBLIC_API_URL)
          yarn build
          netlify deploy --dir /out

#          export NEXT_PUBLIC_API_URL=$(aws cloudformation describe-stacks | jq '.Stacks | .[] | .Outputs | reduce .[]? as $i ({}; .[$i.OutputKey] = $i.OutputValue) | .sandboxApiURL' | grep -v 'null' | tr -d '"')
#          yarn build
#
#          export SANDBOX_DISTRIBUTION_ID=$(aws cloudformation describe-stacks | jq '.Stacks | .[] | .Outputs | reduce .[]? as $i ({}; .[$i.OutputKey] = $i.OutputValue) | .sandboxCloudFrontDistributionID' | grep -v 'null' | tr -d '"')
#          yarn deploy-sandbox
#          aws cloudfront create-invalidation --distribution-id=$SANDBOX_DISTRIBUTION_ID --paths / --profile=ipo-track | > /dev/null


  Run-Tests:
    needs: Deploy-To-Sandbox
    runs-on: ubuntu-latest

    steps:

      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt install nodejs
          node -v
          sudo apt install npm
          npm -v
          npm install -g aws-cdk
          cdk --version
          sudo apt install jq
          jq --version

          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          aws --version
          aws -h

      - name: Configure AWS
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region eu-west-1
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} --profile ipo-track
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}  --profile ipo-track
          aws configure set region eu-west-1  --profile ipo-track


      - name: Test
        run: |
          cd backend
          yarn
          yarn test
          echo "Backend tests done ✅✨"

          cd ../frontend
          yarn
          yarn test
          echo "Frontend tests done ✅✨"

  Deploy-To-Production:
    needs: Run-Tests
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: production
      DATA_API_URL: https://upcoming-ipo-calendar.p.rapidapi.com/ipos-thisweek
      RAPID_API_KEY: ${{ secrets.RAPID_API_KEY }}

    steps:

      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt install nodejs
          node -v
          sudo apt install npm
          npm -v
          npm install -g aws-cdk
          cdk --version
          sudo apt install jq
          jq --version

          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          aws --version
          aws -h

      - name: Configure AWS
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region eu-west-1
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} --profile ipo-track
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}  --profile ipo-track
          aws configure set region eu-west-1  --profile ipo-track


      - name: Deploy-Backend
        run: |
          cd backend
          yarn
          cdk bootstrap
          yarn diff
          yarn fast-deploy


      - name: Deploy-Frontend
        run: |
          cd frontend
          yarn

          export NEXT_PUBLIC_API_URL=$(aws cloudformation describe-stacks | jq '.Stacks | .[] | .Outputs | reduce .[]? as $i ({}; .[$i.OutputKey] = $i.OutputValue) | .sandboxApiURL' | grep -v 'null' | tr -d '"')
          netlify env:set NEXT_PUBLIC_API_URL=$(echo $NEXT_PUBLIC_API_URL)
          yarn build
          netlify deploy --dir /out --prod

#          export NEXT_PUBLIC_API_URL=$(aws cloudformation describe-stacks | jq '.Stacks | .[] | .Outputs | reduce .[]? as $i ({}; .[$i.OutputKey] = $i.OutputValue) | .productionApiURL' | grep -v 'null' | tr -d '"')
#          yarn build
#          yarn sitemap
#
#          export PRODUCTION_DISTRIBUTION_ID=$(aws cloudformation describe-stacks | jq '.Stacks | .[] | .Outputs | reduce .[]? as $i ({}; .[$i.OutputKey] = $i.OutputValue) | .productionCloudFrontDistributionID' | grep -v 'null' | tr -d '"')
#          yarn deploy-production
#          aws cloudfront create-invalidation --distribution-id=$PRODUCTION_DISTRIBUTION_ID --paths / --profile=ipo-track | > /dev/null

